import tkinter as tk
from tkinter import ttk, messagebox
from story_manager import StoryManager
from audio_player import AudioPlayer
from config import Config

class StoryManagerGUI(ttk.Frame):
    def __init__(self, parent, story_manager):
        super().__init__(parent)
        self.story_manager = story_manager
        self.current_story_id = None
        self.current_chapter_id = None
        self.setup_ui()

    def setup_ui(self):
        # Main container
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)

        # Search Section
        search_frame = ttk.Frame(self)
        search_frame.grid(row=0, column=0, padx=10, pady=10, sticky="ew")

        ttk.Label(search_frame, text="T√¨m ki·∫øm:").pack(side="left", padx=5)
        self.search_entry = ttk.Entry(search_frame, width=40)
        self.search_entry.pack(side="left", padx=5)

        ttk.Label(search_frame, text="Th·ªÉ lo·∫°i:").pack(side="left", padx=5)
        self.category_combobox = ttk.Combobox(search_frame, values=Config.CATEGORIES, state="readonly")
        self.category_combobox.pack(side="left", padx=5)

        search_btn = ttk.Button(search_frame, text="üîç T√¨m ki·∫øm", width=14, command=self.search_stories)
        search_btn.pack(side="left", padx=5)

        # Main Content
        main_frame = ttk.Frame(self)
        main_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=2)
        main_frame.grid_rowconfigure(1, weight=1)

        # Story List
        story_list_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch truy·ªán")
        story_list_frame.grid(row=0, column=0, rowspan=2, sticky="nsew", padx=5, pady=5)

        # Thi·∫øt l·∫≠p chi·ªÅu cao c·ªßa Treeview b·∫±ng c√°ch gi·∫£m s·ªë h√†ng hi·ªÉn th·ªã
        self.stories_tree = ttk.Treeview(
            story_list_frame,
            columns=("id", "title", "category"),
            show="headings",
            height=5  # Gi·∫£m s·ªë h√†ng hi·ªÉn th·ªã ƒë·ªÉ gi·∫£m chi·ªÅu cao
        )
        self.stories_tree.heading("title", text="T√™n truy·ªán")
        self.stories_tree.heading("category", text="Th·ªÉ lo·∫°i")
        self.stories_tree.column("id", width=0, stretch=False)
        self.stories_tree.column("title", width=200)
        self.stories_tree.column("category", width=100)
        self.stories_tree.pack(fill="both", expand=True)
        self.stories_tree.bind("<<TreeviewSelect>>", self.on_story_select)

        # Story Controls
        story_controls = ttk.Frame(story_list_frame)
        story_controls.pack(fill="x", pady=5)
        ttk.Button(story_controls, text="Th√™m Truy·ªán", command=self.show_add_story_dialog).pack(side="left", padx=2)
        ttk.Button(story_controls, text="S·ª≠a Truy·ªán", command=self.show_edit_story_dialog).pack(side="left", padx=2)
        ttk.Button(story_controls, text="X√≥a Truy·ªán", command=self.delete_story).pack(side="left", padx=2)

        # Chapter List
        chapter_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch ch∆∞∆°ng")
        chapter_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)

        self.chapters_tree = ttk.Treeview(
            chapter_frame,
            columns=("id", "number", "title"),  # ƒê·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± c·ªôt
            show="headings"
        )
        self.chapters_tree.heading("number", text="S·ªë ch∆∞∆°ng")
        self.chapters_tree.heading("title", text="Ti√™u ƒë·ªÅ")
        self.chapters_tree.column("id", width=0, stretch=False)  # ·∫®n c·ªôt ID
        self.chapters_tree.column("number", width=80)
        self.chapters_tree.column("title", width=250)
        self.chapters_tree.pack(fill="both", expand=True)
        self.chapters_tree.bind("<<TreeviewSelect>>", self.on_chapter_select)

        # Chapter Controls
        chapter_controls = ttk.Frame(chapter_frame)
        chapter_controls.pack(fill="x", pady=5)
        ttk.Button(chapter_controls, text="Th√™m Ch∆∞∆°ng", command=self.show_add_chapter_dialog).pack(side="left", padx=2)
        ttk.Button(chapter_controls, text="S·ª≠a Ch∆∞∆°ng", command=self.show_edit_chapter_dialog).pack(side="left", padx=2)
        ttk.Button(chapter_controls, text="X√≥a Ch∆∞∆°ng", command=self.delete_chapter).pack(side="left", padx=2)

        # Content Editor
        content_frame = ttk.LabelFrame(main_frame, text="N·ªôi dung")
        content_frame.grid(row=1, column=1, sticky="nsew", padx=5, pady=5)

        self.content_text = tk.Text(content_frame, wrap="word", state="disabled")
        scrollbar = ttk.Scrollbar(content_frame, command=self.content_text.yview)
        self.content_text.configure(yscrollcommand=scrollbar.set)
        self.content_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.load_stories()

    # C√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω d·ªØ li·ªáu
    def load_stories(self):
        for item in self.stories_tree.get_children():
            self.stories_tree.delete(item)
        stories = self.story_manager.get_all_stories()
        for story in stories:
            self.stories_tree.insert("", "end", values=story)

        # ========== C·∫¢I THI·ªÜN CH·ª®C NƒÇNG T√åM KI·∫æM ==========

    def search_stories(self):
        keyword = self.search_entry.get().strip()
        category = self.category_combobox.get()

        # Th√™m option "T·∫•t c·∫£" v√†o combobox
        categories = ["T·∫•t c·∫£"] + Config.CATEGORIES
        if self.category_combobox["values"] != categories:
            self.category_combobox["values"] = categories
            self.category_combobox.set("T·∫•t c·∫£")

        stories = self.story_manager.search_stories(keyword, category if category != "T·∫•t c·∫£" else "")
        self.update_stories_table(stories)

    def on_story_select(self, event):
        selected = self.stories_tree.selection()
        if selected:
            self.current_story_id = self.stories_tree.item(selected[0])["values"][0]
            self.load_chapters()
            self.content_text.delete("1.0", "end")  # X√≥a n·ªôi dung c≈© khi ch·ªçn truy·ªán m·ªõi

    def load_chapters(self):
        self.chapters_tree.delete(*self.chapters_tree.get_children())
        chapters = self.story_manager.get_story_chapters(self.current_story_id)
        for chap in chapters:
            # Thay ƒë·ªïi th·ª© t·ª± c√°c gi√° tr·ªã ƒë·ªÉ kh·ªõp v·ªõi c·∫•u tr√∫c Treeview
            self.chapters_tree.insert("", "end", values=(chap[2], "Ch∆∞∆°ng " + str(chap[0]), chap[1]))

    def on_chapter_select(self, event):
        selected = self.chapters_tree.selection()
        if selected:
            self.current_chapter_id = self.chapters_tree.item(selected[0])["values"][0]
            self.load_chapter_content()

    def load_chapter_content(self):
        if self.current_chapter_id:
            self.content_text.config(state="normal")
            content = self.story_manager.get_chapter_content(self.current_chapter_id)
            self.content_text.delete("1.0", "end")
            self.content_text.insert("1.0", content[1])
            self.content_text.config(state="disabled")

    # C√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω dialog
    def show_add_story_dialog(self):
        dialog = StoryDialog(self, "Th√™m truy·ªán m·ªõi")
        self.wait_window(dialog)  # Ch·ªù dialog ƒë√≥ng
        if dialog.result:
            title, category = dialog.result  # Gi·∫£i n√©n tuple
            self.story_manager.add_story(title, category)
            self.load_stories()

    def show_edit_story_dialog(self):
        if self.current_story_id:
            try:
                # L·∫•y d·ªØ li·ªáu t·ª´ database
                story_data = self.story_manager.get_story(self.current_story_id)
                if not story_data or len(story_data) < 3:
                    messagebox.showerror("L·ªói", "D·ªØ li·ªáu truy·ªán kh√¥ng h·ª£p l·ªá")
                    return

                # T·∫°o dialog v√† ch·ªù k·∫øt qu·∫£
                dialog = StoryDialog(self, "S·ª≠a th√¥ng tin truy·ªán", story_data)
                self.wait_window(dialog)  # Quan tr·ªçng: ch·ªù dialog ƒë√≥ng

                if dialog.result:
                    new_title, new_category = dialog.result
                    self.story_manager.update_story(
                        self.current_story_id,
                        new_title,
                        new_category
                    )
                    self.load_stories()

            except Exception as e:
                messagebox.showerror("L·ªói", f"L·ªói khi c·∫≠p nh·∫≠t truy·ªán: {str(e)}")

    def delete_story(self):
        if self.current_story_id and messagebox.askyesno("X√°c nh·∫≠n", "X√≥a truy·ªán n√†y?"):
            self.story_manager.delete_story(self.current_story_id)
            self.current_story_id = None
            self.load_stories()

    # T∆∞∆°ng t·ª± cho c√°c ph∆∞∆°ng th·ª©c x·ª≠ l√Ω ch∆∞∆°ng
    # ...
    def show_add_chapter_dialog(self):
        if not self.current_story_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn truy·ªán tr∆∞·ªõc khi th√™m ch∆∞∆°ng")
            return

        dialog = ChapterDialog(self, "Th√™m ch∆∞∆°ng m·ªõi")
        self.wait_window(dialog)

        if dialog.result:
            title, content = dialog.result
            # L·∫•y s·ªë ch∆∞∆°ng ti·∫øp theo
            chapters = self.story_manager.get_story_chapters(self.current_story_id)
            next_number = len(chapters) + 1

            if self.story_manager.add_chapter(self.current_story_id, next_number, title, content):
                self.load_chapters()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m ch∆∞∆°ng m·ªõi th√†nh c√¥ng")

    def show_edit_chapter_dialog(self):
        if not self.current_chapter_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ch∆∞∆°ng c·∫ßn s·ª≠a")
            return

        # L·∫•y d·ªØ li·ªáu t·ª´ database
        chapter_info = self.story_manager.get_chapter(self.current_chapter_id)
        if not chapter_info or len(chapter_info) < 2:
            messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ch∆∞∆°ng")
            return

        # Truy·ªÅn ƒë√∫ng th·ª© t·ª± d·ªØ li·ªáu
        dialog = ChapterDialog(self, "S·ª≠a ch∆∞∆°ng", chapter_info)
        self.wait_window(dialog)

        if dialog.result:
            new_title, new_content = dialog.result
            if self.story_manager.update_chapter(self.current_chapter_id, new_title, new_content):
                self.load_chapters()
                self.load_chapter_content()

    def delete_chapter(self):
        if not self.current_chapter_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ch∆∞∆°ng c·∫ßn x√≥a")
            return

        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ch∆∞∆°ng n√†y?"):
            if self.story_manager.delete_chapter(self.current_chapter_id):
                self.current_chapter_id = None
                self.load_chapters()
                self.content_text.config(state="normal")
                self.content_text.delete("1.0", "end")
                self.content_text.config(state="disabled")
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a ch∆∞∆°ng th√†nh c√¥ng")



    def update_stories_table(self, stories):
        self.stories_tree.delete(*self.stories_tree.get_children())
        for story in stories:
            self.stories_tree.insert("", "end", values=story)

    # ========== VALIDATE D·ªÆ LI·ªÜU ==========



class ChapterDialog(tk.Toplevel):
    def __init__(self, parent, title, chapter=None):
        super().__init__(parent)
        self.story_manager = StoryManager()
        self.title(title)
        self.result = None

        url_frame = ttk.Frame(self)
        url_frame.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky="ew")  # D√≤ng 0

        ttk.Label(url_frame, text="URL:").pack(side="left")
        self.url_entry = ttk.Entry(url_frame, width=50)
        self.url_entry.pack(side="left", padx=5, fill="x", expand=True)

        self.fetch_btn = ttk.Button(url_frame, text="T·∫£i t·ª´ URL", command=self.fetch_from_url)
        self.fetch_btn.pack(side="left")

        # ===== TI√äU ƒê·ªÄ CH∆Ø∆†NG - D√íNG 1 =====
        ttk.Label(self, text="Ti√™u ƒë·ªÅ ch∆∞∆°ng:").grid(row=1, column=0, padx=5, pady=5)  # D√≤ng 1
        self.title_entry = ttk.Entry(self, width=40)
        self.title_entry.grid(row=1, column=1, padx=5, pady=5, sticky="ew")  # D√≤ng 1

        # ===== N·ªòI DUNG - D√íNG 2 =====
        ttk.Label(self, text="N·ªôi dung:").grid(row=2, column=0, padx=5, pady=5)  # D√≤ng 2
        self.content_text = tk.Text(self, width=60, height=20, wrap="word")
        scrollbar = ttk.Scrollbar(self, command=self.content_text.yview)
        self.content_text.configure(yscrollcommand=scrollbar.set)
        self.content_text.grid(row=2, column=1, padx=5, pady=5, sticky="nsew")  # D√≤ng 2
        scrollbar.grid(row=2, column=2, sticky="ns")  # D√≤ng 2

        # ƒêi·ªÅn d·ªØ li·ªáu n·∫øu l√† s·ª≠a
        # ƒêi·ªÅn d·ªØ li·ªáu n·∫øu l√† s·ª≠a
        if chapter:
            title = chapter[0]
            content = chapter[1]
            chapter_number = chapter[2]

            self.title_entry.insert(0, title)
            self.content_text.insert("1.0", content)
            self.title(f"Ch∆∞∆°ng {chapter_number}: S·ª≠a n·ªôi dung")  # Hi·ªÉn th·ªã s·ªë ch∆∞∆°ng

        # N√∫t ƒëi·ªÅu khi·ªÉn
        btn_frame = ttk.Frame(self)
        btn_frame.grid(row=3, column=0, columnspan=3, pady=10)  # D√≤ng 3
        ttk.Button(btn_frame, text="L∆∞u", command=self.on_ok).pack(side="left", padx=5)
        ttk.Button(btn_frame, text="H·ªßy", command=self.destroy).pack(side="left", padx=5)

    def on_ok(self):
        title = self.title_entry.get().strip()
        content = self.content_text.get("1.0", "end").strip()

        if not title:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ ch∆∞∆°ng")
            return

        if not content:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p n·ªôi dung ch∆∞∆°ng")
            return

        self.result = (title, content)
        self.destroy()

    def fetch_from_url(self):
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p URL truy·ªán")
            return

        # G·ªçi StoryManager ƒë·ªÉ t·∫£i truy·ªán t·ª´ URL
        title, content = self.story_manager.download_story(url)
        if title is None or content is None:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫£i truy·ªán t·ª´ URL ƒë√£ nh·∫≠p")
            return

        # Auto-fill ti√™u ƒë·ªÅ v√† n·ªôi dung v√†o ph·∫ßn Th√™m truy·ªán th·ªß c√¥ng
        self.title_entry.delete(0, tk.END)
        self.title_entry.insert(0, title)
        self.content_text.delete("1.0", tk.END)
        self.content_text.insert("1.0", content)
        self.url_entry.delete(0, tk.END)


class StoryDialog(tk.Toplevel):
    def __init__(self, parent, dialog_title, story_data=None):
        super().__init__(parent)
        self.title(dialog_title)
        self.result = None  # Tuple (title, category)

        # T·∫°o c√°c widget
        ttk.Label(self, text="Ti√™u ƒë·ªÅ:").grid(row=0, column=0, padx=5, pady=5)
        self.title_entry = ttk.Entry(self, width=30)
        self.title_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(self, text="Th·ªÉ lo·∫°i:").grid(row=1, column=0, padx=5, pady=5)
        self.category_combobox = ttk.Combobox(
            self,
            values=["T·∫•t c·∫£"] + Config.CATEGORIES,
            state="readonly"
        )
        self.category_combobox.grid(row=1, column=1, padx=5, pady=5)
        self.category_combobox.set("T·∫•t c·∫£")

        # ƒêi·ªÅn d·ªØ li·ªáu n·∫øu l√† s·ª≠a
        if story_data:
            self.title_entry.insert(0, story_data[1])  # story_data[1] = title
            self.category_combobox.set(story_data[2])  # story_data[2] = category

        # N√∫t ƒëi·ªÅu khi·ªÉn
        btn_frame = ttk.Frame(self)
        btn_frame.grid(row=2, column=0, columnspan=2, pady=10)
        ttk.Button(btn_frame, text="L∆∞u", command=self.on_ok).pack(side="left", padx=5)
        ttk.Button(btn_frame, text="H·ªßy", command=self.destroy).pack(side="left", padx=5)

    def on_ok(self):
        title = self.title_entry.get().strip()
        category = self.category_combobox.get().strip()

        if not title:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ truy·ªán")
            return

        self.result = (title, category)
        self.destroy()